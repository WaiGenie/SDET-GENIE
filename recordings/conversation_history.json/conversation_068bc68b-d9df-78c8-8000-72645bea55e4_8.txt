 system 
You are an AI agent designed to operate in an iterative loop to automate browser tasks. Your ultimate goal is accomplishing the task provided in <user_request>.

<intro>
You excel at following tasks:
1. Navigating complex websites and extracting precise information
2. Automating form submissions and interactive web actions
3. Gathering and saving information 
4. Using your filesystem effectively to decide what to keep in your context
5. Operate effectively in an agent loop
6. Efficiently performing diverse web tasks
</intro>

<language_settings>
- Default working language: **English**
- Always respond in the same language as the user request
</language_settings>

<input>
At every step, your input will consist of: 
1. <agent_history>: A chronological event stream including your previous actions and their results.
2. <agent_state>: Current <user_request>, summary of <file_system>, <todo_contents>, and <step_info>.
3. <browser_state>: Current URL, open tabs, interactive elements indexed for actions, and visible page content.
4. <browser_vision>: Screenshot of the browser with bounding boxes around interactive elements.
5. <read_state> This will be displayed only if your previous action was extract_structured_data or read_file. This data is only shown in the current step.
</input>

<agent_history>
Agent history will be given as a list of step information as follows:

<step_{step_number}>:
Evaluation of Previous Step: Assessment of last action
Memory: Your memory of this step
Next Goal: Your goal for this step
Action Results: Your actions and their results
</step_{step_number}>

and system messages wrapped in <sys> tag.
</agent_history>

<user_request>
USER REQUEST: This is your ultimate objective and always remains visible.
- This has the highest priority. Make the user happy.
- If the user request is very specific - then carefully follow each step and dont skip or hallucinate steps.
- If the task is open ended you can plan yourself how to get it done.
</user_request>

<browser_state>
1. Browser State will be given as:

Current URL: URL of the page you are currently viewing.
Open Tabs: Open tabs with their indexes.
Interactive Elements: All interactive elements will be provided in format as [index]<type>text</type> where
- index: Numeric identifier for interaction
- type: HTML element type (button, input, etc.)
- text: Element description

Examples:
[33]<div>User form</div>
\t*[35]<button aria-label='Submit form'>Submit</button>

Note that:
- Only elements with numeric indexes in [] are interactive
- (stacked) indentation (with \t) is important and means that the element is a (html) child of the element above (with a lower index)
- Elements tagged with a star `*[` are the new interactive elements that appeared on the website since the last step - if url has not changed. Your previous actions caused that change. Think if you need to interact with them, e.g. after input_text you might need to select the right option from the list.
- Pure text elements without [] are not interactive.
</browser_state>

<browser_vision>
You will be provided with a screenshot of the current page with  bounding boxes around interactive elements. This is your GROUND TRUTH: reason about the image in your thinking to evaluate your progress.
If an interactive index inside your browser_state does not have text information, then the interactive index is written at the top center of it's element in the screenshot.
</browser_vision>

<browser_rules>
Strictly follow these rules while using the browser and navigating the web:
- Only interact with elements that have a numeric [index] assigned.
- Only use indexes that are explicitly provided.
- If research is needed, open a **new tab** instead of reusing the current one.
- If the page changes after, for example, an input text action, analyse if you need to interact with new elements, e.g. selecting the right option from the list.
- By default, only elements in the visible viewport are listed. Use scrolling tools if you suspect relevant content is offscreen which you need to interact with. Scroll ONLY if there are more pixels below or above the page.
- You can scroll by a specific number of pages using the num_pages parameter (e.g., 0.5 for half page, 2.0 for two pages).
- If a captcha appears, attempt solving it if possible. If not, use fallback strategies (e.g., alternative site, backtrack).
- If expected elements are missing, try refreshing, scrolling, or navigating back.
- If the page is not fully loaded, use the wait action.
- You can call extract_structured_data on specific pages to gather structured semantic information from the entire page, including parts not currently visible.
- Call extract_structured_data only if the information you are looking for is not visible in your <browser_state> otherwise always just use the needed text from the <browser_state>.
- Calling the extract_structured_data tool is expensive! DO NOT query the same page with the same extract_structured_data query multiple times. Make sure that you are on the page with relevant information based on the screenshot before calling this tool.
- If you fill an input field and your action sequence is interrupted, most often something changed e.g. suggestions popped up under the field.
- If the action sequence was interrupted in previous step due to page changes, make sure to complete any remaining actions that were not executed. For example, if you tried to input text and click a search button but the click was not executed because the page changed, you should retry the click action in your next step.
- If the <user_request> includes specific page information such as product type, rating, price, location, etc., try to apply filters to be more efficient.
- The <user_request> is the ultimate goal. If the user specifies explicit steps, they have always the highest priority.
- If you input_text into a field, you might need to press enter, click the search button, or select from dropdown for completion.
- Don't login into a page if you don't have to. Don't login if you don't have the credentials. 
- There are 2 types of tasks always first think which type of request you are dealing with:
1. Very specific step by step instructions:
- Follow them as very precise and don't skip steps. Try to complete everything as requested.
2. Open ended tasks. Plan yourself, be creative in achieving them.
- If you get stuck e.g. with logins or captcha in open-ended tasks you can re-evaluate the task and try alternative ways, e.g. sometimes accidentally login pops up, even though there some part of the page is accessible or you get some information via web search.
- If you reach a PDF viewer, the file is automatically downloaded and you can see its path in <available_file_paths>. You can either read the file or scroll in the page to see more.
</browser_rules>

<file_system>
- You have access to a persistent file system which you can use to track progress, store results, and manage long tasks.
- Your file system is initialized with a `todo.md`: Use this to keep a checklist for known subtasks. Use `replace_file_str` tool to update markers in `todo.md` as first action whenever you complete an item. This file should guide your step-by-step execution when you have a long running task.
- If you are writing a `csv` file, make sure to use double quotes if cell elements contain commas.
- If the file is too large, you are only given a preview of your file. Use `read_file` to see the full content if necessary.
- If exists, <available_file_paths> includes files you have downloaded or uploaded by the user. You can only read or upload these files but you don't have write access.
- If the task is really long, initialize a `results.md` file to accumulate your results.
- DO NOT use the file system if the task is less than 10 steps!
</file_system>

<task_completion_rules>
You must call the `done` action in one of two cases:
- When you have fully completed the USER REQUEST.
- When you reach the final allowed step (`max_steps`), even if the task is incomplete.
- If it is ABSOLUTELY IMPOSSIBLE to continue.

The `done` action is your opportunity to terminate and share your findings with the user.
- Set `success` to `true` only if the full USER REQUEST has been completed with no missing components.
- If any part of the request is missing, incomplete, or uncertain, set `success` to `false`.
- You can use the `text` field of the `done` action to communicate your findings and `files_to_display` to send file attachments to the user, e.g. `["results.md"]`.
- Put ALL the relevant information you found so far in the `text` field when you call `done` action.
- Combine `text` and `files_to_display` to provide a coherent reply to the user and fulfill the USER REQUEST.
- You are ONLY ALLOWED to call `done` as a single action. Don't call it together with other actions.
- If the user asks for specified format, such as "return JSON with following structure", "return a list of format...", MAKE sure to use the right format in your answer.
- If the user asks for a structured output, your `done` action's schema will be modified. Take this schema into account when solving the task!
</task_completion_rules>

<action_rules>
- You are allowed to use a maximum of 10 actions per step.

If you are allowed multiple actions, you can specify multiple actions in the list to be executed sequentially (one after another).
- If the page changes after an action, the sequence is interrupted and you get the new state. 
</action_rules>


<efficiency_guidelines>
You can output multiple actions in one step. Try to be efficient where it makes sense. Do not predict actions which do not make sense for the current page.

**Recommended Action Combinations:**
- `input_text` + `click_element_by_index` → Fill form field and submit/search in one step
- `input_text` + `input_text` → Fill multiple form fields
- `click_element_by_index` + `click_element_by_index` → Navigate through multi-step flows (when the page does not navigate between clicks)
- `scroll` with num_pages 10 + `extract_structured_data` → Scroll to the bottom of the page to load more content before extracting structured data
- File operations + browser actions 

Do not try multiple different paths in one step. Always have one clear goal per step. 
Its important that you see in the next step if your action was successful, so do not chain actions which change the browser state multiple times, e.g. 
- do not use click_element_by_index and then go_to_url, because you would not see if the click was successful or not. 
- or do not use switch_tab and switch_tab together, because you would not see the state in between.
- do not use input_text and then scroll, because you would not see if the input text was successful or not. 
</efficiency_guidelines>

<reasoning_rules>
You must reason explicitly and systematically at every step in your `thinking` block. 

Exhibit the following reasoning patterns to successfully achieve the <user_request>:
- Reason about <agent_history> to track progress and context toward <user_request>.
- Analyze the most recent "Next Goal" and "Action Result" in <agent_history> and clearly state what you previously tried to achieve.
- Analyze all relevant items in <agent_history>, <browser_state>, <read_state>, <file_system>, <read_state> and the screenshot to understand your state.
- Explicitly judge success/failure/uncertainty of the last action. Never assume an action succeeded just because it appears to be executed in your last step in <agent_history>. For example, you might have "Action 1/1: Input '2025-05-05' into element 3." in your history even though inputting text failed. Always verify using <browser_vision> (screenshot) as the primary ground truth. If a screenshot is unavailable, fall back to <browser_state>. If the expected change is missing, mark the last action as failed (or uncertain) and plan a recovery.
- If todo.md is empty and the task is multi-step, generate a stepwise plan in todo.md using file tools.
- Analyze `todo.md` to guide and track your progress. 
- If any todo.md items are finished, mark them as complete in the file.
- Analyze whether you are stuck, e.g. when you repeat the same actions multiple times without any progress. Then consider alternative approaches e.g. scrolling for more context or send_keys to interact with keys directly or different pages.
- Analyze the <read_state> where one-time information are displayed due to your previous action. Reason about whether you want to keep this information in memory and plan writing them into a file if applicable using the file tools.
- If you see information relevant to <user_request>, plan saving the information into a file.
- Before writing data into a file, analyze the <file_system> and check if the file already has some content to avoid overwriting.
- Decide what concise, actionable context should be stored in memory to inform future reasoning.
- When ready to finish, state you are preparing to call done and communicate completion/results to the user.
- Before done, use read_file to verify file contents intended for user output.
- Always reason about the <user_request>. Make sure to carefully analyze the specific steps and information required. E.g. specific filters, specific form fields, specific information to search. Make sure to always compare the current trajactory with the user request and think carefully if thats how the user requested it.
</reasoning_rules>

<examples>
Here are examples of good output patterns. Use them as reference but never copy them directly.

<todo_examples>
  "write_file": {
    "file_name": "todo.md",
    "content": "# ArXiv CS.AI Recent Papers Collection Task\n\n## Goal: Collect metadata for 20 most recent papers\n\n## Tasks:\n- [ ] Navigate to https://arxiv.org/list/cs.AI/recent\n- [ ] Initialize papers.md file for storing paper data\n- [ ] Collect paper 1/20: The Automated LLM Speedrunning Benchmark\n- [x] Collect paper 2/20: AI Model Passport\n- [ ] Collect paper 3/20: Embodied AI Agents\n- [ ] Collect paper 4/20: Conceptual Topic Aggregation\n- [ ] Collect paper 5/20: Artificial Intelligent Disobedience\n- [ ] Continue collecting remaining papers from current page\n- [ ] Navigate through subsequent pages if needed\n- [ ] Continue until 20 papers are collected\n- [ ] Verify all 20 papers have complete metadata\n- [ ] Final review and completion"
  }
</todo_examples>

<evaluation_examples>
- Positive Examples:
"evaluation_previous_goal": "Successfully navigated to the product page and found the target information. Verdict: Success"
"evaluation_previous_goal": "Clicked the login button and user authentication form appeared. Verdict: Success"
- Negative Examples:
"evaluation_previous_goal": "Failed to input text into the search bar as I cannot see it in the image. Verdict: Failure"
"evaluation_previous_goal": "Clicked the submit button with index 15 but the form was not submitted successfully. Verdict: Failure"
</evaluation_examples>

<memory_examples>
"memory": "Visited 2 of 5 target websites. Collected pricing data from Amazon ($39.99) and eBay ($42.00). Still need to check Walmart, Target, and Best Buy for the laptop comparison."
"memory": "Found many pending reports that need to be analyzed in the main page. Successfully processed the first 2 reports on quarterly sales data and moving on to inventory analysis and customer feedback reports."
</memory_examples>

<next_goal_examples>
"next_goal": "Click on the 'Add to Cart' button to proceed with the purchase flow."
"next_goal": "Extract details from the first item on the page."
</next_goal_examples>
</examples>

<output>
You must ALWAYS respond with a valid JSON in this exact format:

{
  "thinking": "A structured <think>-style reasoning block that applies the <reasoning_rules> provided above.",
  "evaluation_previous_goal": "Concise one-sentence analysis of your last action. Clearly state success, failure, or uncertain.",
  "memory": "1-3 sentences of specific memory of this step and overall progress. You should put here everything that will help you track progress in future steps. Like counting pages visited, items found, etc.",
  "next_goal": "State the next immediate goal and action to achieve it, in one clear sentence."
  "action":[{"one_action_name": {// action-specific parameter}}, // ... more actions in sequence]
}

Action list should NEVER be empty.
</output>


 user 
<agent_history>
<step>
No previous action was taken. Verdict: N/A
Starting the Gherkin scenario execution. The first action will be to navigate to the Swag Labs login page.
Navigate to the Swag Labs login page at 'https://www.saucedemo.com/' to begin the scenario.
Result:
Navigated to https://www.saucedemo.com/
</step>
<step>
Successfully navigated to the Swag Labs login page. Verdict: Success
Currently on the Swag Labs login page. The next step is to log in with the provided credentials.
Input the username "standard_user" into the username field, then the password "secret_sauce" into the password field, and finally click the login button to log in.
Result:
Input 'standard_user' into element 1.
Input 'secret_sauce' into element 2.
Clicked element with index 3
</step>
<step>
Successfully logged in with the provided credentials. Verdict: Success
Successfully logged in to Swag Labs. Now on the inventory page, ready to add items to the cart.
Add "Sauce Labs Bolt T-Shirt" to the cart by clicking its 'Add to cart' button.
Result:
Clicked element with index 20
</step>
<step>
The previous action was to add 'Sauce Labs Bolt T-Shirt' to the cart. While the button text for the item did not change to 'Remove' on the inventory page, the shopping cart badge in the screenshot indicates that an item was successfully added. Verdict: Success (with minor discrepancy in button text update)
Successfully logged in and added 'Sauce Labs Bolt T-Shirt' to the cart. The next step is to remove the item from the cart.
Navigate to the shopping cart page to remove 'Sauce Labs Bolt T-Shirt' from the cart. I will click the shopping cart icon (index 5) to achieve this.
Result:
Clicked element with index 5
</step>
<step>
Failed to navigate to the shopping cart page. Verdict: Failure
Attempted to navigate to the cart page but remained on the inventory page. The 'Sauce Labs Bolt T-Shirt' is still in the cart.
Navigate to the shopping cart page by clicking the shopping cart icon (index 5) to remove the 'Sauce Labs Bolt T-Shirt' from the cart.
Result:
Clicked element with index 5
</step>
<step>
Successfully navigated to the shopping cart page. Verdict: Success
Successfully navigated to the cart page, but the cart is empty. Need to go back to the inventory page to verify the item's status.
Navigate back to the inventory page by clicking the 'Continue Shopping' button to check the status of 'Sauce Labs Bolt T-Shirt'.
Result:
Clicked element with index 6
</step>
<step>
Successfully navigated back to the inventory page. Verdict: Success
Currently on the inventory page. The 'Sauce Labs Bolt T-Shirt' is not in the cart, as its button says 'Add to cart'. I need to add it to the cart first.
Add 'Sauce Labs Bolt T-Shirt' to the cart by clicking its 'Add to cart' button (index 20) to ensure it's in the cart before attempting to remove it.
Result:
Clicked element with index 20
</step>
</agent_history>

<agent_state>
<user_request>

    You are a browser automation agent tasked with executing the following Gherkin scenario.
    Interpret each step (Given, When, Then, And, But) as instructions for interacting with a web page or verifying its state.

    
**Execution Context:**
- Current URL: about:blank
- Previously visited URLs: https://www.saucedemo.com/cart.html, https://www.saucedemo.com/inventory.html, https://www.saucedemo.com/
- Session data: {}


    **Execution Strategy:**

    1.  **Interpret Gherkin Steps:** Read each Gherkin step and understand the high-level action or verification required.
        *   `Given`: Set up the initial state or context (e.g., navigate to a page, ensure an element is visible).
        *   `When`: Perform the primary action or trigger the event being tested (e.g., click a button, type text, submit a form).
        *   `Then`: Verify the expected outcome or system state after the 'When' action (e.g., check for visible text, assert element presence, verify URL, check data).
        *   `And`/`But`: Continue the action or verification of the preceding step (Given, When, or Then).

    2.  **Element Identification:** When a step requires interacting with or verifying an element, use a robust strategy to locate it. Do NOT rely solely on XPath from a previous step or a single type of selector.
        *   **Prioritize Selectors:** Attempt to locate elements using the most reliable selectors first:
            *   ID (if available and unique)
            *   Name attribute
            *   CSS Selectors (preferable for readability and robustness over brittle XPaths)
            *   Link Text or Partial Link Text (for anchor tags)
            *   Button Text or Value
            *   XPath (use as a fallback, prioritize reliable, less brittle XPaths if possible, e.g., relative paths or paths using attributes).
        *   **Contextual Identification:** Use the text content, role, or other attributes mentioned or implied in the Gherkin step description to help identify the *correct* element among similar ones. For example, if the step is "When the user clicks the 'Submit' button", look for a button element containing the text "Submit".
        *   **Locate BEFORE Action/Verification:** Always attempt to locate the element successfully *before* performing an action (click, type) or verification on it.
        *   **Capture Detailed Element Information:** After locating an element but before interacting with it, use the "Get detailed element information" action to capture comprehensive details about the element including its ID, tag name, class name, XPaths (absolute and relative), and CSS selectors. This information is crucial for generating robust test scripts.

    3.  **Perform Actions:** For `When` (and sometimes `Given` or `And`) steps requiring interaction:
        *   `Click`: If the step implies clicking (e.g., "clicks the button", "selects the link"), use the "Perform element action" with action="click".
        *   `Type Text`: If the step implies entering text (e.g., "enters 'value' into the field"), use the "Perform element action" with action="fill" and value="text". Use the exact text specified in the Gherkin.
        *   `Select Option`: If the step implies selecting from a dropdown, use appropriate actions to interact with select elements.
        *   Handle other interactions as implied by the step description.

    4.  **Perform Verifications:** For `Then` (and sometimes `And` or `But`) steps requiring verification:
        *   Check for element visibility or presence on the page.
        *   Verify the text content of an element matches expected text using "Get element property" with property_name="innerText".
        *   Verify an element's state (e.g., enabled, disabled, selected).
        *   Verify the current page URL.
        *   Verify the presence or content of specific messages (e.g., error messages, success messages).
        *   Perform other assertions as implied by the Gherkin step's expected outcome.

    5.  **Handle Timing and Dynamic Content:** Web pages can load elements dynamically.
        *   **Wait Implicitly/Explicitly:** After navigation or an action that triggers a page change or dynamic content load, wait intelligently for the target element(s) of the *next* step to be visible, clickable, or present in the DOM before attempting to interact with or verify them. Avoid fixed waits.
        *   **Retry Strategy:** If an element is not immediately found, implement a short retry mechanism before failing the step.

    6.  **Error Handling:** If a step fails (e.g., element not found, element not interactive, verification fails, unexpected alert):
        *   Immediately stop executing the current scenario.
        *   Log the failure clearly, including the step that failed and the reason.

    7.  **Detailed Logging:** Log every significant action and verification attempt:
        *   The Gherkin step being executed.
        *   The specific browser action being attempted (e.g., "Attempting to click element", "Attempting to type text").
        *   The selector(s) used to find the target element and the result of the find operation (found, not found).
        *   If found, key properties of the element (e.g., tag name, text, relevant attributes like `id`, `name`, `class`, `value`, `role`).
        *   The outcome of the action (successful, failed).
        *   For `Then` steps, the verification performed (e.g., "Verifying text content of element X is 'Expected Text'", "Verifying element Y is visible") and the result (Pass/Fail), including actual vs. expected values if it's a comparison.
        *   Any errors encountered.

    
**Important Navigation Note:** Since the current URL is about:blank and the first step doesn't explicitly navigate to a page, you should first navigate to the Swag Labs login page at 'https://www.saucedemo.com/' before executing the first step.

    **Important:** For each element you interact with, make sure to capture its detailed information using the "Get detailed element information" action. This will provide comprehensive element attributes (ID, tag name, class name, XPaths, CSS selectors) that are essential for generating robust test scripts.

    **TASK TO EXECUTE:** Execute the following Gherkin scenario step-by-step, following the strategy above. Prioritize successful execution and clear reporting. Do not ask clarifying questions; infer actions based on the detailed Gherkin steps and attempt the most probable browser action.

    **Given Gherkin Scenario:**

    ```gherkin
    Scenario: Verify removing 'Sauce Labs Bolt T-Shirt' from cart after addition
  Given the user is logged in with username "standard_user" and password "secret_sauce"
  And "Sauce Labs Bolt T-Shirt" has been added to the cart
  When the user removes "Sauce Labs Bolt T-Shirt" from the cart on the inventory page
  Then the shopping cart badge should be empty or not displayed
  And the "Remove" button for "Sauce Labs Bolt T-Shirt" should change back to "Add to cart"
    ```
    
</user_request>
<file_system>

</file_system>
<todo_contents>
[Current todo.md is empty, fill it with your plan when applicable]
</todo_contents>
<step_info>
Step 8. Maximum steps: 50
Current date and time: 2025-09-06 22:32Current date: 2025-09-06
</step_info>
</agent_state>
<browser_state>
Current tab: 23AA
Available tabs:
Tab 23AA: https://www.saucedemo.com/inventory.html - Swag Labs

<page_info>Viewport size: 1251x626px, Total page size: 1251x1109px, 0.0 pages above, 0.8 pages below, 1.8 total pages</page_info>

Elements you can interact with inside the viewport:
[Start of page]
[1]<div />
	[2]<button type=button />
		Open Menu
	[3]<img alt=Open Menu />
Swag Labs
[4]<div />
	[5]<a />
Products
[6]<span />
	[7]<span />
		Name (A to Z)
	[8]<select expanded=false />
[9]<a />
	[10]<img alt=Sauce Labs Backpack />
[11]<a />
	Sauce Labs Backpack
carry.allTheThings() with the sleek, streamlined Sly Pack that melds uncompromising style with unequaled laptop and tablet protection.
29.99
[12]<button name=add-to-cart-sauce-labs-backpack />
	Add to cart
[13]<a />
	[14]<img alt=Sauce Labs Bike Light />
[15]<a />
	Sauce Labs Bike Light
A red light isn't the desired state in testing but it sure helps when riding your bike at night. Water-resistant with 3 lighting modes, 1 AAA battery included.
9.99
[16]<button name=add-to-cart-sauce-labs-bike-light />
	Add to cart
[17]<a />
	[18]<img alt=Sauce Labs Bolt T-Shirt />
[19]<a />
	Sauce Labs Bolt T-Shirt
Get your testing superhero on with the Sauce Labs bolt T-shirt. From American Apparel, 100% ringspun combed cotton, heather gray with red bolt.
15.99
*[20]<button name=remove-sauce-labs-bolt-t-shirt />
	Remove
[21]<a />
	[22]<img alt=Sauce Labs Fleece Jacket />
[23]<a />
	Sauce Labs Fleece Jacket
It's not every day that you come across a midweight quarter-zip fleece jacket capable of handling everything from a relaxing day outdoors to a busy day at the office.
49.99
[24]<button name=add-to-cart-sauce-labs-fleece-jacket />
	Add to cart
[End of page]
</browser_state>

Current screenshot:

 RESPONSE
{
  "thinking": "I have successfully added 'Sauce Labs Bolt T-Shirt' to the cart in the previous step. Now, according to the Gherkin scenario, I need to remove it from the cart on the inventory page. I can see a 'Remove' button with index 20 next to 'Sauce Labs Bolt T-Shirt' in the `browser_state` and screenshot. Clicking this button should remove the item from the cart.",
  "evaluation_previous_goal": "Successfully added 'Sauce Labs Bolt T-Shirt' to the cart. Verdict: Success",
  "memory": "Successfully logged in and added 'Sauce Labs Bolt T-Shirt' to the cart. Now I need to remove it from the cart.",
  "next_goal": "Remove 'Sauce Labs Bolt T-Shirt' from the cart by clicking the 'Remove' button (index 20) on the inventory page.",
  "action": [
    {
      "click_element_by_index": {
        "index": 20,
        "while_holding_ctrl": false
      }
    }
  ]
}